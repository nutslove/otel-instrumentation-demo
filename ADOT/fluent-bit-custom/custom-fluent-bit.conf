[SERVICE]
    Flush        5
    Daemon       off
    Log_Level    info
    HTTP_Server  On
    HTTP_Listen  0.0.0.0
    HTTP_Port    2020

# ========================================
# INPUT PLUGINS
# ========================================

# Collect container logs from FireLens (stdout/stderr)
[INPUT]
    Name              forward
    Listen            0.0.0.0
    Port              24224
    Buffer_Chunk_Size 1M
    Buffer_Max_Size   6M
    Tag               container.logs

# Receive OTLP Traces over gRPC
[INPUT]
    Name              opentelemetry
    Listen            0.0.0.0
    Port              4317
    Tag               otlp.traces
    Successful_response_code 200

# Receive OTLP Metrics over gRPC
[INPUT]
    Name              opentelemetry
    Listen            0.0.0.0
    Port              4318
    Tag               otlp.metrics
    Successful_response_code 200

# Scrape Prometheus metrics from Java service (OpenTelemetry metrics)
[INPUT]
    Name              prometheus_scrape
    Host              localhost
    Port              9464
    Tag               prometheus.java
    Scrape_interval   15
    Metrics_path      /metrics

# Scrape Actuator metrics from Java service
[INPUT]
    Name              prometheus_scrape
    Host              localhost
    Port              8081
    Tag               prometheus.java.actuator
    Scrape_interval   15
    Metrics_path      /actuator/prometheus

# ========================================
# FILTER PLUGINS
# ========================================

# Parse JSON logs from containers (FireLens already sends in JSON format)
# If logs are already in JSON format, this filter is optional

# Add ECS metadata to all logs
[FILTER]
    Name          aws
    Match         container.*
    imds_version  v2

# Add custom labels for all data
[FILTER]
    Name          modify
    Match         *
    Add           cluster ${ECS_CLUSTER}
    Add           aws.region ${AWS_REGION}
    Add           environment production

# Enrich OTLP traces with ECS metadata
[FILTER]
    Name          modify
    Match         otlp.traces
    Add           deployment.environment ecs-fargate
    Add           cloud.provider aws
    Add           cloud.platform aws_ecs

# Enrich OTLP metrics with ECS metadata
[FILTER]
    Name          modify
    Match         otlp.metrics
    Add           deployment.environment ecs-fargate
    Add           cloud.provider aws
    Add           cloud.platform aws_ecs

# ========================================
# OUTPUT PLUGINS
# ========================================

# Send container logs to Loki
[OUTPUT]
    Name              loki
    Match             container.logs
    Host              ${LOKI_ENDPOINT}
    Port              3100
    labels            job=ecs-fargate, cluster=${ECS_CLUSTER}, container_name=$container_name
    label_keys        service,task_arn
    line_format       json
    auto_kubernetes_labels off
    Retry_Limit       3
    header            X-Scope-OrgID otel-demo

# Send OTLP Traces to Tempo
[OUTPUT]
    Name              opentelemetry
    Match             otlp.traces
    Host              ${TEMPO_ENDPOINT}
    Port              4318
    Traces_uri        /v1/traces
    Log_response_payload False
    Tls               Off
    Tls.verify        Off
    Retry_Limit       3
    header            X-Scope-OrgID otel-demo

# Send OTLP Metrics to Thanos (via Prometheus Remote Write format)
# Note: Fluent Bit's OpenTelemetry plugin will convert OTLP metrics to Prometheus format
[OUTPUT]
    Name              prometheus_remote_write
    Match             otlp.metrics
    Host              ${THANOS_ENDPOINT}
    Port              19291
    Uri               /api/v1/receive
    Log_response_payload False
    Add_label         cluster ${ECS_CLUSTER}
    Add_label         job ecs-fargate
    Retry_Limit       3
    header            THANOS-TENANT otel-demo

# Send Prometheus metrics from Java service to Thanos
[OUTPUT]
    Name              prometheus_remote_write
    Match             prometheus.java
    Host              ${THANOS_ENDPOINT}
    Port              19291
    Uri               /api/v1/receive
    Log_response_payload False
    Add_label         cluster ${ECS_CLUSTER}
    Add_label         job java-otel-metrics
    Retry_Limit       3
    header            THANOS-TENANT otel-demo

# Send Actuator metrics from Java service to Thanos
[OUTPUT]
    Name              prometheus_remote_write
    Match             prometheus.java.actuator
    Host              ${THANOS_ENDPOINT}
    Port              19291
    Uri               /api/v1/receive
    Log_response_payload False
    Add_label         cluster ${ECS_CLUSTER}
    Add_label         job java-actuator-metrics
    Retry_Limit       3
    header            THANOS-TENANT otel-demo

# Debug output (remove in production)
# [OUTPUT]
#     Name   stdout
#     Match  *
#     Format json_lines
